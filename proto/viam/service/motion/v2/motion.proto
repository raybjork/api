syntax = "proto3";

package viam.service.motion.x.v2;

import "common/v1/common.proto";
import "service/motion/v1/motion.proto";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "go.viam.com/api/service/motion/v2";
option java_package = "com.viam.service.motion.v2";

// A MotionService declares the gRPC contract for a motion service
service MotionService {
  rpc Move(service.motion.v1.MoveRequest) returns (MoveResponse) {
    option (google.api.http) = {
      post: "/viam/api/v2/service/motion/{name}/move"
    };
  }

  // Generate a plan and move a component to a specific pose
  // with respect to the SLAM map's origin.
  // May replan to avoid obstacles
  rpc MoveOnMap(service.motion.v1.MoveOnMapRequest) returns (MoveOnMapResponse) {
    option (google.api.http) = {
      post: "/viam/api/v2/service/motion/{name}/move_on_map"
    };
  }

  // Generate and begin executing an execution to move a component
  // to a specific GPS coordinate.
  // May replan to avoid obstacles & account for location drift.
  // Creates a new plan upon replanning.
  rpc MoveOnGlobe(service.motion.v1.MoveOnGlobeRequest) returns (MoveOnGlobeResponse) {
    option (google.api.http) = {
      post: "/viam/api/v2/service/motion/{name}/move_on_globe"
    };
  }

  rpc GetPose(service.motion.v1.GetPoseRequest) returns (GetPoseResponse) {
    option (google.api.http) = {
      get: "/viam/api/v2/service/motion/{name}/pose"
    };
  }

  // Stops a Plan
  rpc StopPlan(service.motion.v1.StopPlanRequest) returns (StopPlanResponse) {
    option (google.api.http) = {
      put: "/viam/api/v2/service/motion/{name}/stop_plan"
    };
  }

  // Returns the status of plans created by requests to move components
  // that are executing OR are part of an execution which changed it state
  // within the a 24HR TTL OR until the robot reinitializes.
  // This currently only returns plans for MoveOnGlobe and MoveOnMap.
  rpc ListPlanStatuses(service.motion.v1.ListPlanStatusesRequest) returns (ListPlanStatusesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v2/service/motion/{name}/list_plan_statuses"
    };
  }

  // Returns the plan(s) & state history of the most recent execution to move a
  // component. Returns a result if the last execution is still executing OR
  // changed state within the last 24 hours AND the robot has not reinitialized.
  // Plans are never mutated.
  // Replans always create new plans.
  // Replans share the execution_id of the previously executing plan.
  // This currently only returns plans for MoveOnGlobe and MoveOnMap.
  rpc GetPlan(service.motion.v1.GetPlanRequest) returns (GetPlanResponse) {
    option (google.api.http) = {
      get: "/viam/api/v2/service/motion/{name}/get_plan"
    };
  }

  // DoCommand sends/receives arbitrary commands
  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v2/service/motion/{name}/do_command"
    };
  }
}
